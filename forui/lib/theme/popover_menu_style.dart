import 'package:forui/forui.dart';
import 'package:flutter/material.dart';

/// Generated by Forui CLI.
///
/// Modify the generated function bodies to create your own custom style.
/// Then, call the modified functions and pass the results to your FThemeData.
///
/// ### Example
/// Generated style:
/// ```dart
/// // Modify this function's body.
/// FDividerStyles dividerStyles({
///   required FColorScheme color,
///   required FStyle style,
/// }) => FDividerStyles(
///   horizontalStyle: FDividerStyle(
///     colors: colors.secondary,
///     padding: FDividerStyle.defaultPadding.horizontalStyle,
///     width: style.borderWidth,
///   ),
///   verticalStyle: FDividerStyle(
///     colors: colors.secondary,
///     padding: FDividerStyle.defaultPadding.verticalStyle,
///     width: style.borderWidth,
///   ),
/// );

/// File that contains your `FThemeData`:
/// ```dart
/// import 'package:my_application/theme/divider_style.dart' // Your generated style file.
///
/// FThemeData(
///  color: FThemes.zinc.light.color,
///  style: FThemes.zinc.light.style,
///  dividerStyles: CustomFDividerStyles.dividerStyles( // The function in your generated style file.
///    color: FThemes.zinc.light.color,
///    style: FThemes.zinc.light.style,
///   ),
/// );
/// ```
///
/// A theme can be generated using the Forui CLI:
/// ```shell
/// dart forui theme create [theme name]
/// ```
///
/// See https://forui.dev/docs/themes#customize-themes for more information.
FPopoverMenuStyle popoverMenuStyle({
  required FColors colors,
  required FStyle style,
  required FTypography typography,
}) => FPopoverMenuStyle.inherit(
  colors: colors,
  style: style,
  typography: typography,
);

FTileGroupStyle _tileGroupStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) => FTileGroupStyle(
  borderColor: colors.border,
  borderWidth: style.borderWidth,
  borderRadius: style.borderRadius,
  tileStyle: _tileStyle(colors: colors, typography: typography, style: style),
  labelTextStyle: FWidgetStateMap({
    WidgetState.error: typography.base.copyWith(
      color:
          style.formFieldStyle.labelTextStyle.maybeResolve({})?.color ??
          colors.primary,
      fontWeight: FontWeight.w600,
    ),
    WidgetState.disabled: typography.base.copyWith(
      color:
          style.formFieldStyle.labelTextStyle.maybeResolve({
            WidgetState.disabled,
          })?.color ??
          colors.disable(colors.primary),
      fontWeight: FontWeight.w600,
    ),
    WidgetState.any: typography.base.copyWith(
      color:
          style.formFieldStyle.labelTextStyle.maybeResolve({})?.color ??
          colors.primary,
      fontWeight: FontWeight.w600,
    ),
  }),
  descriptionTextStyle: style.formFieldStyle.descriptionTextStyle.map(
    (s) => typography.xs.copyWith(color: s.color),
  ),
  errorTextStyle: typography.xs.copyWith(
    color: style.formFieldStyle.errorTextStyle.color,
  ),
);

FTileStyle _tileStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) => FTileStyle(
  border: FWidgetStateMap({
    WidgetState.focused: Border.all(
      width: style.borderWidth,
      color: colors.primary,
    ),
    WidgetState.any: Border.all(width: style.borderWidth, color: colors.border),
  }),
  borderRadius: style.borderRadius,
  backgroundColor: FWidgetStateMap({
    WidgetState.disabled: colors.disable(colors.secondary),
    WidgetState.hovered: colors.secondary,
    WidgetState.any: colors.background,
  }),
  dividerStyle: FWidgetStateMap({
    WidgetState.any: FDividerStyle(
      color: colors.border,
      width: style.borderWidth,
      padding: EdgeInsets.zero,
    ),
  }),
  contentStyle: _tileContentStyle(colors: colors, typography: typography),
  tappableStyle: style.tappableStyle.copyWith(
    animationTween: FTappableAnimations.none,
    pressedEnterDuration: Duration.zero,
    pressedExitDuration: const Duration(milliseconds: 25),
  ),
);

FTileContentStyle _tileContentStyle({
  required FColors colors,
  required FTypography typography,
}) => FTileContentStyle(
  prefixIconStyle: FWidgetStateMap({
    WidgetState.disabled: IconThemeData(
      color: colors.disable(colors.primary),
      size: 18,
    ),
    WidgetState.any: IconThemeData(color: colors.primary, size: 18),
  }),
  titleTextStyle: FWidgetStateMap({
    WidgetState.disabled: typography.base.copyWith(
      color: colors.disable(colors.primary),
    ),
    WidgetState.any: typography.base,
  }),
  subtitleTextStyle: FWidgetStateMap({
    WidgetState.disabled: typography.xs.copyWith(
      color: colors.disable(colors.mutedForeground),
    ),
    WidgetState.any: typography.xs.copyWith(color: colors.mutedForeground),
  }),
  detailsTextStyle: FWidgetStateMap({
    WidgetState.disabled: typography.base.copyWith(
      color: colors.disable(colors.mutedForeground),
    ),
    WidgetState.any: typography.base.copyWith(color: colors.mutedForeground),
  }),
  suffixIconStyle: FWidgetStateMap({
    WidgetState.disabled: IconThemeData(
      color: colors.disable(colors.mutedForeground),
      size: 18,
    ),
    WidgetState.any: IconThemeData(color: colors.mutedForeground, size: 18),
  }),
);
