import 'package:forui/forui.dart';
import 'package:flutter/material.dart';

/// Generated by Forui CLI.
///
/// Modify the generated function bodies to create your own custom style.
/// Then, call the modified functions and pass the results to your FThemeData.
///
/// ### Example
/// Generated style:
/// ```dart
/// // Modify this function's body.
/// FDividerStyles dividerStyles({
///   required FColorScheme color,
///   required FStyle style,
/// }) => FDividerStyles(
///   horizontalStyle: FDividerStyle(
///     colors: colors.secondary,
///     padding: FDividerStyle.defaultPadding.horizontalStyle,
///     width: style.borderWidth,
///   ),
///   verticalStyle: FDividerStyle(
///     colors: colors.secondary,
///     padding: FDividerStyle.defaultPadding.verticalStyle,
///     width: style.borderWidth,
///   ),
/// );

/// File that contains your `FThemeData`:
/// ```dart
/// import 'package:my_application/theme/divider_style.dart' // Your generated style file.
///
/// FThemeData(
///  color: FThemes.zinc.light.color,
///  style: FThemes.zinc.light.style,
///  dividerStyles: CustomFDividerStyles.dividerStyles( // The function in your generated style file.
///    color: FThemes.zinc.light.color,
///    style: FThemes.zinc.light.style,
///   ),
/// );
/// ```
///
/// A theme can be generated using the Forui CLI:
/// ```shell
/// dart forui theme create [theme name]
/// ```
///
/// See https://forui.dev/docs/themes#customize-themes for more information.
FSelectGroupStyle selectGroupStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) {
  final vertical = _labelStyles(style: style).verticalStyle;
  final labelTextStyle = FWidgetStateMap({
    WidgetState.disabled: typography.sm.copyWith(
      color: colors.disable(colors.primary),
      fontWeight: FontWeight.w500,
    ),
    WidgetState.any: typography.sm.copyWith(
      color: colors.primary,
      fontWeight: FontWeight.w500,
    ),
  });
  final descriptionTextStyle = FWidgetStateMap({
    WidgetState.disabled: typography.sm.copyWith(
      color: colors.disable(colors.mutedForeground),
    ),
    WidgetState.any: typography.sm.copyWith(color: colors.mutedForeground),
  });
  final errorTextStyle = typography.sm.copyWith(
    color: colors.error,
    fontWeight: FontWeight.w500,
  );
  return FSelectGroupStyle(
    checkboxStyle: _checkboxStyle(colors: colors, style: style).copyWith(
      labelTextStyle: labelTextStyle,
      descriptionTextStyle: descriptionTextStyle,
      errorTextStyle: errorTextStyle,
    ),
    radioStyle: _radioStyle(colors: colors, style: style).copyWith(
      labelTextStyle: labelTextStyle,
      descriptionTextStyle: descriptionTextStyle,
      errorTextStyle: errorTextStyle,
    ),
    labelTextStyle: style.formFieldStyle.labelTextStyle,
    descriptionTextStyle: style.formFieldStyle.descriptionTextStyle,
    errorTextStyle: style.formFieldStyle.errorTextStyle,
    labelPadding: vertical.labelPadding,
    descriptionPadding: vertical.descriptionPadding,
    errorPadding: vertical.errorPadding,
    childPadding: vertical.childPadding,
  );
}

FCheckboxStyle _checkboxStyle({
  required FColors colors,
  required FStyle style,
}) {
  final label = _labelStyles(style: style).horizontalStyle;
  return FCheckboxStyle(
    tappableStyle: style.tappableStyle.copyWith(
      animationTween: FTappableAnimations.none,
    ),
    focusedOutlineStyle: style.focusedOutlineStyle.copyWith(
      borderRadius: BorderRadius.circular(4),
    ),
    iconStyle: FWidgetStateMap({
      WidgetState.selected & WidgetState.error: IconThemeData(
        color: colors.errorForeground,
        size: 14,
      ),
      WidgetState.selected & ~WidgetState.disabled: IconThemeData(
        color: colors.primaryForeground,
        size: 14,
      ),
      WidgetState.selected & WidgetState.disabled: IconThemeData(
        color: colors.disable(colors.primaryForeground),
        size: 14,
      ),
    }),
    decoration: FWidgetStateMap({
      WidgetState.error & WidgetState.selected: BoxDecoration(
        borderRadius: style.borderRadius,
        color: colors.error,
      ),
      WidgetState.error: BoxDecoration(
        borderRadius: style.borderRadius,
        border: Border.all(color: colors.error, width: 0.6),
        color: colors.background,
      ),
      WidgetState.disabled & WidgetState.selected: BoxDecoration(
        borderRadius: style.borderRadius,
        color: colors.disable(colors.primary),
      ),
      WidgetState.disabled: BoxDecoration(
        borderRadius: style.borderRadius,
        border: Border.all(color: colors.disable(colors.primary), width: 0.6),
        color: colors.disable(colors.background),
      ),
      WidgetState.selected: BoxDecoration(
        borderRadius: style.borderRadius,
        color: colors.primary,
      ),
      WidgetState.any: BoxDecoration(
        borderRadius: style.borderRadius,
        border: Border.all(color: colors.primary, width: 0.6),
        color: colors.background,
      ),
    }),
    labelTextStyle: style.formFieldStyle.labelTextStyle,
    descriptionTextStyle: style.formFieldStyle.descriptionTextStyle,
    errorTextStyle: style.formFieldStyle.errorTextStyle,
    labelPadding: label.labelPadding,
    descriptionPadding: label.descriptionPadding,
    errorPadding: label.errorPadding,
    childPadding: label.childPadding,
  );
}

FRadioStyle _radioStyle({required FColors colors, required FStyle style}) {
  final label = _labelStyles(style: style).horizontalStyle;
  return FRadioStyle(
    tappableStyle: style.tappableStyle.copyWith(
      animationTween: FTappableAnimations.none,
    ),
    focusedOutlineStyle: FFocusedOutlineStyle(
      color: colors.primary,
      borderRadius: BorderRadius.circular(100),
    ),
    borderColor: FWidgetStateMap({
      WidgetState.error: colors.error,
      WidgetState.disabled: colors.disable(colors.primary),
      WidgetState.any: colors.primary,
    }),
    backgroundColor: FWidgetStateMap.all(colors.background),
    indicatorColor: FWidgetStateMap({
      WidgetState.error: colors.error,
      WidgetState.disabled: colors.disable(colors.primary),
      WidgetState.any: colors.primary,
    }),
    labelTextStyle: style.formFieldStyle.labelTextStyle,
    descriptionTextStyle: style.formFieldStyle.descriptionTextStyle,
    errorTextStyle: style.formFieldStyle.errorTextStyle,
    labelPadding: label.labelPadding,
    descriptionPadding: label.descriptionPadding,
    errorPadding: label.errorPadding,
    childPadding: label.childPadding,
  );
}

FLabelStyles _labelStyles({required FStyle style}) => FLabelStyles(
  horizontalStyle: _labelStyle(
    style: style,
    descriptionPadding: const EdgeInsets.only(top: 2),
    errorPadding: const EdgeInsets.only(top: 2),
    childPadding: const EdgeInsets.symmetric(horizontal: 8),
  ),
  verticalStyle: _labelStyle(
    style: style,
    labelPadding: const EdgeInsets.only(bottom: 5),
    descriptionPadding: const EdgeInsets.only(top: 5),
    errorPadding: const EdgeInsets.only(top: 5),
  ),
);

FLabelStyle _labelStyle({
  required FStyle style,
  EdgeInsetsGeometry labelPadding = EdgeInsets.zero,
  EdgeInsetsGeometry descriptionPadding = EdgeInsets.zero,
  EdgeInsetsGeometry errorPadding = EdgeInsets.zero,
  EdgeInsetsGeometry childPadding = EdgeInsets.zero,
}) => FLabelStyle.inherit(
  style: style,
  labelPadding: labelPadding,
  descriptionPadding: descriptionPadding,
  errorPadding: errorPadding,
  childPadding: childPadding,
);
