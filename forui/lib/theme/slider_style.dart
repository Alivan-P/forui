import 'package:forui/forui.dart';
import 'package:flutter/material.dart';

/// Generated by Forui CLI.
///
/// Modify the generated function bodies to create your own custom style.
/// Then, call the modified functions and pass the results to your FThemeData.
///
/// ### Example
/// Generated style:
/// ```dart
/// // Modify this function's body.
/// FDividerStyles dividerStyles({
///   required FColorScheme color,
///   required FStyle style,
/// }) => FDividerStyles(
///   horizontalStyle: FDividerStyle(
///     colors: colors.secondary,
///     padding: FDividerStyle.defaultPadding.horizontalStyle,
///     width: style.borderWidth,
///   ),
///   verticalStyle: FDividerStyle(
///     colors: colors.secondary,
///     padding: FDividerStyle.defaultPadding.verticalStyle,
///     width: style.borderWidth,
///   ),
/// );

/// File that contains your `FThemeData`:
/// ```dart
/// import 'package:my_application/theme/divider_style.dart' // Your generated style file.
///
/// FThemeData(
///  color: FThemes.zinc.light.color,
///  style: FThemes.zinc.light.style,
///  dividerStyles: CustomFDividerStyles.dividerStyles( // The function in your generated style file.
///    color: FThemes.zinc.light.color,
///    style: FThemes.zinc.light.style,
///   ),
/// );
/// ```
///
/// A theme can be generated using the Forui CLI:
/// ```shell
/// dart forui theme create [theme name]
/// ```
///
/// See https://forui.dev/docs/themes#customize-themes for more information.
FSliderStyle sliderStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
  required AlignmentGeometry labelAnchor,
  required double labelOffset,
  required EdgeInsetsGeometry descriptionPadding,
  required EdgeInsetsGeometry childPadding,
  AlignmentGeometry tooltipTipAnchor = Alignment.bottomCenter,
  AlignmentGeometry tooltipThumbAnchor = Alignment.topCenter,
}) => FSliderStyle(
  activeColor: FWidgetStateMap({
    WidgetState.error: colors.error,
    WidgetState.disabled: colors.disable(colors.primary, colors.secondary),
    WidgetState.any: colors.primary,
  }),
  inactiveColor: FWidgetStateMap.all(colors.secondary),
  thumbStyle: FSliderThumbStyle(
    color: FWidgetStateMap({
      WidgetState.error: colors.errorForeground,
      WidgetState.any: colors.primaryForeground,
    }),
    borderColor: FWidgetStateMap({
      WidgetState.error: colors.error,
      WidgetState.disabled: colors.disable(colors.primary),
      WidgetState.any: colors.primary,
    }),
    focusedOutlineStyle: style.focusedOutlineStyle,
  ),
  markStyle: FSliderMarkStyle(
    tickColor: FWidgetStateMap.all(colors.mutedForeground),
    labelTextStyle: FWidgetStateMap({
      WidgetState.error: typography.xs.copyWith(color: colors.error),
      WidgetState.any: typography.xs.copyWith(color: colors.mutedForeground),
    }),
    labelAnchor: labelAnchor,
    labelOffset: labelOffset,
  ),
  tooltipStyle: _tooltipStyle(
    colors: colors,
    typography: typography,
    style: style,
  ),
  tooltipTipAnchor: tooltipTipAnchor,
  tooltipThumbAnchor: tooltipThumbAnchor,
  labelTextStyle: style.formFieldStyle.labelTextStyle,
  descriptionTextStyle: style.formFieldStyle.descriptionTextStyle,
  errorTextStyle: style.formFieldStyle.errorTextStyle,
  descriptionPadding: descriptionPadding,
  childPadding: childPadding,
);

FTooltipStyle _tooltipStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) => FTooltipStyle(
  decoration: BoxDecoration(
    color: colors.background,
    borderRadius: style.borderRadius,
    border: Border.all(width: style.borderWidth, color: colors.border),
    boxShadow: FTooltipStyle.shadow,
  ),
  textStyle: typography.sm,
);
